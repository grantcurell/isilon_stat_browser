# isilon_stat_browser MakefilePYTHON ?= python3PIP ?= pip3PYLINT ?= pylintHEXAPARSE = ./hexaparse.pyDIST_DIR = distVERSION := $(shell git describe --tags --exact-match --abbrev=0 2>/dev/null || git rev-parse --short HEAD)ZIP_NAME = isilon_stat_browser_$(VERSION).zip.DEFAULT_GOAL := help## Clean up generated filesclean:	-rm -rf $(DIST_DIR) test_results	-rm -f stat_key_browser/data/key_tags.json	-rm -f stat_key_browser/data/key_cats.json	-rm -f web_app/js/keys.js web_app/index.html	-rm -f isilon_stat_browser_v*.zip## Generate .json files from .hexatags:	$(HEXAPARSE) stat_key_browser/data/key_tags.hexa > stat_key_browser/data/key_tags.json	$(HEXAPARSE) stat_key_browser/data/key_cats.hexa > stat_key_browser/data/key_cats.json## Run pylintlint:	$(PYLINT) -E -f colorized -r n stat_key_browser bin/ tests/## Run unit testsunittests: lint	$(PYTHON) -m pytest -v tests/unit/ *.py## Run unit tests with coveragecoverage: lint	$(PYTHON) -m pytest -v --cov=stat_key_browser --cov-report term-missing --cov-config tests/unit/.coveragerc tests/unit/ *.py## Run functional tests (requires BUILD_BROWSER_ARGS if used)check_cluster:	@test -n "$(BUILD_BROWSER_ARGS)" || (echo "⚠️  BUILD_BROWSER_ARGS not set. Builder may pause for input."; true)functional_tests: check_cluster clean unittests tags	$(PYTHON) -m pytest -v tests/functional/## Build ZIP distributiondist: check_cluster clean unittests tags	$(PYTHON) build_stat_browser.py -x $(BUILD_BROWSER_ARGS)	mkdir -p $(DIST_DIR)	cp build_stat_browser.py $(DIST_DIR)	cp requirements.txt $(DIST_DIR)	cp README.md $(DIST_DIR)	cp -r stat_key_browser $(DIST_DIR)	cp -r web_app $(DIST_DIR)	zip -r $(ZIP_NAME) $(DIST_DIR)/*## Helphelp:	@echo "Available targets:"	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}'